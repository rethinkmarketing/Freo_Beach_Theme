<?php
global $wp_registered_sidebars;
$sidebars = array(''=>'');
foreach ($wp_registered_sidebars as $v) {
    $sidebars[$v['id']] = $v['name'];
}
$options = array(
    'convertingOldData'=>__('Coverting old data. Please wait...', 'themify'),
    'oldDataConverted'=>__('Old data has been converted successfully', 'themify'),
    'gridChanged'=>__('The columns have been set to "auto" in %s.', 'themify'),
    'gutterChanged'=>__('The gutter has been changed from %from to %to in %bp.', 'themify'),
    'postBuilderNotExist'=>__('The post doesn&apos;t contain Builder data', 'themify'),
    'importBuilderNotExist'=>__('Import file doesn&apos;t contain Builder data', 'themify'),
    'importWrongFormat'=>__('Import file should be .zip or .txt file', 'themify'),
    'zipFileEmpty'=>__('Zip file doesn&apos;t contain files', 'themify'),
    'importSelectPost'=>__('Please select a post to import', 'themify'),
    'convertExportUrls' => __('Converting shortcodes URLs. Please wait...', 'themify'),
    'createZip' => __('Trying to create the zip file. Please wait...', 'themify'),
    'createJson' => __('Trying to create the JSON file. Please wait...', 'themify'),
    'lightBoxRequiredFields'=>__('Please enter the required fields', 'themify'),
    'confirmRestoreRev' => __('Save the current state as a revision before replacing?', 'themify'),
    'dialog_import_page_post' => __('Would you like to replace or append the layout?', 'themify'),
    'confirm_on_duplicate_page' => __('Save before duplicating this page?', 'themify'),
    'confirm_template_selected' => __('Would you like to replace or append the layout?', 'themify'),
    'repeatRowDeleteConfirm' => __('Confirm to delete this?', 'themify'),
    'enterRevComment' => __('Add optional revision comment:', 'themify'),
    'confirmDeleteRev' =>  __('Confirm to delete this revision?', 'themify'),
    'revSaved' =>  __('Revision %rev_title% has been created for %post_title%', 'themify'),
    'builderSaved' =>  __('%post_title% has been saved', 'themify'),
    'builderClose' => __('Would you like to save before closing?', 'themify'),
    'saveClose'=>__('Save & Close','themify'),
    'saveRevisionClose'=>__('Save as Revision and close','themify'),
    'savedLayoutTitle'=>__( 'Saved', 'themify' ),
    'layoutEditConfirm' => __('Your changes will be lost. Are you sure?', 'themify'),
    'layoutError'=>__( 'There was an error loading layouts. Please make sure your internet is connected and check if Themify site is available.', 'themify' ),
    'layoutPartSaved' => __('Layout Part has been saved', 'themify'),
    'switchToFrontendLabel' => __('Themify Builder', 'themify'),
    'text_alert_wrong_paste' => __('Error: Paste valid data only (paste row data to row, sub-row data to sub-row, module data to module).', 'themify'),
    'text_alert_sub_in_sub' => __('Error: Subrow can&apos;t contain subrow.', 'themify'),
    'text_import_layout_button' => __('Import Layout', 'themify'),
    'rowLibraryDeleteConfirm' =>  __('Confirm to delete this saved row?', 'themify'),
    'multiSelected'=>__('Multiple Selected', 'themify'),
    'moduleLibraryDeleteConfirm' => __('Confirm to delete this saved module?', 'themify'),
    'partLibraryDeleteConfirm' => __('Confirm to delete this? It can not be undone. Once the Layout Part is deleted, all pages with this Layout Part will be gone.', 'themify'),
    'incorrectImageURL' => __('Incorrect image URL. Please enter a valid image URL.', 'themify'),
    'enterGlobalStyleName' => __('Please enter Global Style name.', 'themify'),
    'errorSaveBuilder'=>__('There was an error while saving. Please try again.', 'themify'),
    'has_gs' => __('This module is using a Global Style. Adding styling to this module will override the Global Style. Click here to add styling.', 'themify'),
    'img_help'=>__('Image can not be cropped because it is on an external site', 'themify'),
    'img_help2'=>__('Image can not be cropped because it is in the content', 'themify'),
    'img_big'=>__('Your uploaded image is too large (%w x %hpx). Server will not able to resize it. Please resize it below 1600px and re-upload it.', 'themify'),
    'empty_modules'=>__('Module/addon(s) deactivated: %s', 'themify'),
    'preview' => __('Preview', 'themify'),
    'add_module' => __('Add module', 'themify'),
    'not_empty' => __('Please enter the required field.', 'themify'),
    'addSavedGS' => __('Would you like to apply the saved Global Style?', 'themify'),
    'no_op_module'=>__('There is no option for this module. Click "Styling" tab to style it.', 'themify'),
    's_v' => __('Sticky Visibility', 'themify'),
    'h_a' => __('Hide All', 'themify'),
    'de' => __('Desktop', 'themify'),
    'mo' => __('Mobile', 'themify'),
    'ta' => __('Tablet', 'themify'),
    'ta_l' => __('Tablet Landscape', 'themify'),
    'replace_builder' => __('Replace Layout', 'themify'),
    'append_builder' => __('Append to Layout', 'themify'),
    'layout_replace' => __( 'Replace Layout', 'themify' ),
    'layout_append' => __( 'Append to Layout', 'themify' ),
    'layout_error' => __( 'There was an error loading the layout. Please try again later or you can download the file: ({FILE}) and then import it manually (https://themify.me/docs/builder#import-export).', 'themify' ),
    'layoutEditUrl'=>admin_url('edit.php?post_type=' . Themify_Builder_Layouts::LAYOUT_SLUG),
    'layoutAddUrl'=>admin_url('post-new.php?post_type=' . Themify_Builder_Layouts::LAYOUT_SLUG),
    'layoutEditText'=>__('Manage Layouts', 'themify'),
    'layoutAddText'=>__('Add New', 'themify'),
    'offline'=>__('You seem to be offline. Changes may not be saved. Click <a href="#">export</a> to save the current changes.','themify'),
    'img_menu'=>array(
        'hflip'=>__('Flip Horizontal', 'themify'),
        'vflip'=>__('Flip Vertical', 'themify'),
        'rotate'=>__('Rotate', 'themify'),
        'pallete'=>__('Adjust','themify'),
        'undo'=>__('Undo','themify'),
        'redo'=>__('Redo','themify'),
    ),
    'uploading'=>array(
        'download_fail'=> __( 'Download failed: %post%.', 'themify' ),
        'upload_fail'=> __( 'Upload failed (%msg%): %post%', 'themify' ),
        'upload_images'=> __( 'Uploading image (%from%/%to%): ', 'themify' ),
        'download_images'=> __( 'Downloading image (%from%/%to%): ', 'themify' ),
    ),
    'lottie_lib'=>array(
        'bg'=>__('Preview Background','themify'),
        'msg'=> __( 'You can use external file or download to your site. Using external file is loaded from lottiefiles.com and use CDN to load faster, but if animation`s author changed or deleted the animation, the file will be changed on your side too.', 'themify' ),
        'external_btn'=> __( 'Use External', 'themify' ),
        'upload_btn'=> __( 'Upload File', 'themify' ),
        'browse'=>__( 'Lottie Library', 'themify' ),
        'upload_msg'=> __( 'Uploading lottie animation: (%title%)', 'themify' ),
        'upload_fail'=> __( 'Upload failed: (%msg%)', 'themify' ),
    ),
    'broken_code'=>__('Found errors in Custom %s code. Save anyway?','themify'),
    'label' => array(
        'asp'=>__('Aspect Ratio','themify'),
        'up'=>__('Move Up', 'themify'),
        'down'=>__('Move Down', 'themify'),
        'cancel'=>__('Cancel', 'themify'),
        'ok'=>__('OK', 'themify'),
        'rmeta'=>__('Confirm to delete this metabox?', 'themify'),
        'smodule' => __('Save Module', 'themify'),
        'srow' => __('Save Row', 'themify'),
        'g_s' => __('Global Style', 'themify'),
        'query_by' => __('Query by', 'themify'),
        'query_id' => __('Post Type', 'themify'),
        'query_term_id' => __('Categories', 'themify'),
        'query_tax_id' => __('Taxonomy', 'themify'),
        'query_tag_id' => __('Tags', 'themify'),
        'query_desc' => __('Enter multiple category IDs (eg. 2,5,8) or slug (eg. news,blog,featured) or exclude category IDs (eg. -2,-5,-8).', 'themify'),
        'slug_desc' => __('Insert post slug(s) - separate multiple slugs with commas.', 'themify'),
        'errorId' => __('This ID has been used on the page, please enter another one.', 'themify'),
        'cimg_app'=>__('Circle style works better for square image ratio.','themify'),
        'slug_label' => __('Post Slugs or IDs', 'themify'),
        'all_posts' => __( 'All Posts', 'themify' ),
        'sticky_first' => __( 'Show Sticky Posts First', 'themify' ),
        'slayout_part' => __('Save as Layout Part', 'themify'),
        'nlayout' => __('New Layout Part', 'themify'),
        'mlayout' => __('Manage Layout Part', 'themify'),
        'import_label' => __('%s data', 'themify'),
        'import_data' => __('Paste %s data here', 'themify'),
        'import_tab' => __('Import %s', 'themify'),
        'export_tab' => __('Export %s', 'themify'),
        'export_data' => __('You can copy & paste this data to another Builder site', 'themify'),
        'revision' => __('Revisions', 'themify'),
        'solid' => __('Solid', 'themify'),
        'dashed' => __('Dashed', 'themify'),
        'dotted' => __('Dotted', 'themify'),
        'double' => __('Double', 'themify'),
        'upload' => __('Upload', 'themify'),
        'upload_image' => __('Upload an Image', 'themify'),
        'upload_video' => __('Upload a Video', 'themify'),
        'upload_audio' => __('Upload an Audio', 'themify'),
        'upload_json'=>__('Upload a json file','themify'),
        'insert_image' => __('Insert File URL', 'themify'),
        'browse_image' => __('Browse Library', 'themify'),
        'add_media' => __('Add Media', 'themify'),
        'add_gallery' => __('Insert Gallery', 'themify'),
        'image_preview' => __('Image Preview', 'themify'),
        'css' => __('CSS', 'themify'),
        'cus_css_m' => __('Custom CSS entered here will add to this page only.', 'themify'),
        'save_as_layout' => __('Save as Layout', 'themify'),
        'title' => __('Title', 'themify'),
        'or' => __('or', 'themify'),
        'slug' => __('Slug', 'themify'),
        'count'=>__('Count','themify'),
        'google_fonts' => __('Google Fonts', 'themify'),
        'cf_fonts' => __('Custom Fonts', 'themify'),
        'safe_fonts' => __('Web Safe Fonts', 'themify'),
        'font_preview' => __('Font Preview', 'themify'),
        'visual' => __('Visual', 'themify'),
        'text' => __('Text', 'themify'),
        'new_row' => __('Add new', 'themify'),
        'table_landscape' => __('Tablet Landscape', 'themify'),
        'duplicate' => __('Duplicate', 'themify'),
        'delete' => __('Delete', 'themify'),
        'insert_icon' => __('Insert Icon', 'themify'),
        'linear' => __('Linear', 'themify'),
        'radial' => __('Radial', 'themify'),
        'rotation' => __('Rotation', 'themify'),
        'image' => __('Image', 'themify'),
        'gradient' => __('Gradient', 'themify'),
        'clear_gradient' => __('Clear', 'themify'),
        'save_gradient' => __('Save', 'themify'),
        'ie_gradient' => __('Import/Export', 'themify'),
        'circle'=>__('Circle', 'themify'),
        'circle_radial' => __('Circle Radial', 'themify'),
        'all' => __('All', 'themify'),
        'center'=>__('Center','themify'),
        'top' => __('Top', 'themify'),
        'top_left' => __('Top-Left', 'themify'),
        'left' => __('Left', 'themify'),
        'bottom' => __('Bottom', 'themify'),
        'right' => __('Right', 'themify'),
        'styling' => __('Styling', 'themify'),
        'visibility' => __('Visibility', 'themify'),
        'animation' => __('Animation', 'themify'),
        'custom_css' => __('CSS Class', 'themify'),
        'id_name' => __('ID Name', 'themify'),
        'id_help' => __('ID name is used to identify element in un-stick option for "Sticky Scrolling" feature.', 'themify'),
        'transparent' => __('Transparent', 'themify'),
        'id_desc' => __('ID name should be unique (it is used to identify the element for Sticky Scrolling).', 'themify'),
        'custom_css_help' => __('Add custom CSS class(es) for custom styling (<a href="https://themify.me/docs/builder#additional-css-class" target="_blank">learn more</a>).', 'themify'),
        'reset_style' => __('Reset Styling', 'themify'),
        'reset_effect' => __('Reset All Effects', 'themify'),
        'ctr_save' => __('Ctrl + S', 'themify'),
        'done' => __('Done', 'themify'),
        's_s' => __('Save Style', 'themify'),
        'search' => __('Search', 'themify'),
        'search_widget' => __('Search widgets…', 'themify'),
        'widget_validate' => __('Please select the Widget', 'themify'),
        'o' => __('Outline', 'themify'),
        'p' => __('Padding', 'themify'),
        'm' => __('Margin', 'themify'),
        'gap' => __('Gap', 'themify'),
        'ng' => __('Column Gap', 'themify'),
        'rg' => __('Row Gap', 'themify'),
        'b' => __('Border', 'themify'),
        'f' => __('Font', 'themify'),
        'f_l' => __('Filters', 'themify'),
        'f_f' => __('Font Family', 'themify'),
        'f_w' => __('Font Weight', 'themify'),
        'f_st' => __('Font Style', 'themify'),
        'f_s' => __('Font Size', 'themify'),
        'l_h' => __('Line Height', 'themify'),
        'l_s' => __('Letter Spacing', 'themify'),
        't_a' => __('Text Align', 'themify'),
        't_t' => __('Text Transform', 'themify'),
        't_d' => __('Text Decoration', 'themify'),
        'bg' => __('Background', 'themify'),
        'bg_c' => __('Background Color', 'themify'),
        'b_i' => __('Background Image', 'themify'),
        'b_r' => __('Background Repeat', 'themify'),
        'b_p' => __('Background Position', 'themify'),
        'r' => __('Repeat', 'themify'),
        'r_all' => __('Repeat All', 'themify'),
        'r_h' => __('Repeat Horizontally', 'themify'),
        'r_v' => __('Repeat Vertically', 'themify'),
        'r_no' => __('Do not repeat', 'themify'),
        'fcover' => __('Fullcover', 'themify'),
        'f_c' => __('Font Color', 'themify'),
        'l' => __('Link', 'themify'),
        'clickl' => __('Clickable Link', 'themify'),
        'houtl' => __('Hover Outline', 'themify'),
        'o_l'=>__('Open Link In','themify'),
        'lg'=>__('Lightbox','themify'),
        'cl'=>__('Custom Link','themify'),
        'c' => __('Color', 'themify'),
        'c_t' => __('Color Type', 'themify'),
        'col' => __('Multi-columns', 'themify'),
        'g' => __('General', 'themify'),
        'm_t' => __('Module Title', 'themify'),
        'head' => __('Heading', 'themify'),
        'n' => __('Normal', 'themify'),
        'h' => __('Hover', 'themify'),
        'w' => __('Width', 'themify'),
        'ht' => __('Height', 'themify'),
        'a_ht' => __('Auto Height', 'themify'),
        'm_ht' => __('Min Height', 'themify'),
        'mx_ht' => __('Max Height', 'themify'),
        'c_c' => __('Column Count', 'themify'),
        'c_g' => __('Column Gap', 'themify'),
        'c_d' => __('Column Divider', 'themify'),
        'req' => __('Required', 'themify'),
        'b_m' => __('Blend Mode', 'themify'),
        'r_c' => __('Corners', 'themify'),
        'sh' => __('Shadow', 'themify'),
        'b_s' => __('Box Shadow', 'themify'),
        'h_o' => __('Horizontal Offset', 'themify'),
        'v_o' => __('Vertical Offset', 'themify'),
        'bl' => __('Blur', 'themify'),
        'spr' => __('Spread', 'themify'),
        'in_sh' => __('Inset Shadow', 'themify'),
        't_sh' => __('Text Shadow', 'themify'),
        'h_sh' => __('Horizontal Shadow', 'themify'),
        'v_sh' => __('Vertical Shadow', 'themify'),
        's_e_f' => __('Scroll Effects', 'themify'),
        's_e_s' => __('Sticky', 'themify'),
        's_e_m' => __('Motion', 'themify'),
        'y' => __('Yes', 'themify'),
        'no' => __('No', 'themify'),
        'en'=> __('Enable', 'themify'),
        'dis'=> __('Disable', 'themify'),
        'hi'=>__('Hide', 'themify'),
        's'=>__('Show', 'themify'),
        'cus'=>__('Custom', 'themify'),
        'F_j_Y' => __('August 18, 2019 (F j, Y)', 'themify'),
        'Y_m_d' => __('2019-08-18 (Y-m-d)', 'themify'),
        'm_d_Y' => __('08/18/2019 (m/d/Y)', 'themify'),
        'd_m_Y' => __('18/08/2019 (d/m/Y)', 'themify'),
        'def' => __('Default', 'themify'),
        'cus_f' => __('Custom Format', 'themify'),
        'cus_fd_h' => __('Enter date format with these letters: l D d j S F m M n Y y', 'themify'),
        'cus_ft_h' =>  __('Enter time format with these letters: g G H i a A', 'themify'),
        'icon' => __('Icon', 'themify'),
        'b_t' => __('Before Text', 'themify'),
        'a_t' => __('After Text', 'themify'),
        'd_f' => __('Date Format', 'themify'),
        't_f'=>__('Time Format', 'themify'),
        'g_i_a'=> __('6:28 pm (g:i a)', 'themify'),
        'g_i_A'=> __('6:28 PM (g:i A)', 'themify'),
        'H_i'=>__('18:28 (H:i)', 'themify'),
        'no_c'=>__('No Comments', 'themify'),
        'one_c'=>__('One Comment', 'themify'),
        'comments'=> __('Comments', 'themify'),
        'a_p'=>__('Author Picture', 'themify'),
        'p_s'=>__('Picture Size', 'themify'),
        'sep'=>__('Separator', 'themify'),
        'save' => __( 'Save', 'themify' ),
        'save_no' => __( "Don't Save", 'themify' ),
        'rows_fetch_error' => __( 'Failed to load pre-designed rows from Themify server.', 'themify' ),
        'row_fetch_error' => __( 'Failed to load the row template.', 'themify' ),
        'hue' => __( 'Hue', 'themify' ),
        'sat' => __( 'Saturation', 'themify' ),
        'bri' => __( 'Brightness', 'themify' ),
        'con' => __( 'Contrast', 'themify' ),
        'inv' => __( 'Invert', 'themify' ),
        'se' => __( 'Sepia', 'themify' ),
        'op' => __( 'Opacity', 'themify' ),
        'zi' => __( 'Z-Index', 'themify' ),
        'zhelp' => __('Module with greater stack order is always in front of an module with a lower stack order', 'themify'),
        'a_wd' => __('Auto Width', 'themify'),
        'mi_wd' => __('Min Width', 'themify'),
        'ma_wd' => __('Max Width', 'themify'),
        'po' => __('Position', 'themify'),
        'auto' => __('Auto', 'themify'),
        'abs' => __('Absolute', 'themify'),
        'fi' => __('Fixed', 'themify'),
        're' => __('Relative', 'themify'),
        'st' => __('Static', 'themify'),
        'disp' => __('Display', 'themify'),
        'i_g' => __('Image Gutter', 'themify'),
        'tr' => __('Transform', 'themify'),
        'sc' => __('Scale', 'themify'),
        'tl' => __('Translate', 'themify'),
        'sk' => __('Skew', 'themify'),
        'ro' => __('Rotate', 'themify'),
        'none' => __('None', 'themify'),
        'undl'=>__('Underline','themify'),
        'ovl'=>__('Overline','themify'),
        'thl'=>__('Line through','themify'),
        'it'=>__('Italic','themify'),
        'bold'=>__('Bold','themify'),
        'medf'=>__('Media File','themify'),
        'perml'=>__('Permalink','themify'),
        'ntab'=>__('New tab','themify'),
        'swin'=>__('Same window','themify'),
        'just'=>__('Justify','themify'),
        'cpt'=>__('Capitalize','themify'),
        'lcase'=>__('Lowercase','themify'),
        'ucase'=>__('Uppercase','themify'),
        'mid'=>__('Middle','themify'),
        'block' => __('Block', 'themify'),
        'inbl' => __('Inline', 'themify'),
        'rounded'=>__('Rounded','themify'),
        'bordered'=>__('Bordered','themify'),
        'dshadow'=>__('Drop Shadow','themify'),
        'glossy'=>__('Glossy','themify'),
        'embos'=>__('Embossed','themify'),
        'orig'=>__('Origin', 'themify'),
        'delay'=>__('Delay','themify'),
        'speed'=>__('Speed','themify'),
        'sec'=>__('Seconds','themify'),
        'rev'=>__('Reverse','themify'),
        'onload'=>__('On Load','themify'),
        'click'=>__('Click','themify'),
        'hold'=>__('Hold','themify'),
        'phold'=>__('PauseHold','themify'),
        'seek'=>__('Seek','themify'),
        'scroll'=>__('Scroll','themify'),
        'e'=>__('Event','themify'),
        'play'=>__('Play','themify'),
        'stop'=>__('Stop','themify'),
        'loop'=>__('Loop','themify'),
        'csssel'=>__('Css selector','themify'),
        'aq' => array( /* Advanced Query */
            __( 'Date Query', 'themify' ),
            __( 'From', 'themify' ),
            __( 'To', 'themify' ),
            __( 'Custom Field Query', 'themify' ),
            __( 'Key', 'themify' ),
            __( 'Value', 'themify' ),
            __( 'Comparison', 'themify' ),
            __( 'Author(s) Query', 'themify' ),
            __( 'Add Query Filter', 'themify' ),
            __( 'Enter a comma-separated list of author IDs or usernames.', 'themify' ),
        ),
        'hc' => array(
            __( 'Hook Content', 'themify' ),
            __( 'Hook Location', 'themify' ),
        ),
        'ren'=>__('Render','themify'),
        'lottie'=>array(
            'pl'=>__('Play this animation on','themify'),
            'plr'=>__('Play Next Row Lottie','themify'),
            'n'=>__('Animation does not play','themify'),
            'end'=>__('Animation End','themify'),
            'clm'=>__('After X click(s) this animation will start play.','themify'),
            'hm'=>__('After X hover(s) this animation will start play.','themify'),
            'hlm'=>__('Hover will start animation. If the user releases the hover over the animation it plays in reverse.','themify'),
            'phm'=>__('Hover will start animation. If the user releases the hover over the animation it pauses.','themify'),
            'in_r'=>__('When the element visible % in the selected range, will be work selected "Event", if element visible % less then "min" visibility value will work previous lottie row, if element visible % higher then visibility "max" value will the next row.','themify'),
            'clr'=>__('After X click(s) will switch to next animation.','themify'),
            'hr'=>__('After X hover(s) will switch to next animation.','themify'),
            'fid'=>__('FrameId','themify'),
            'fidm'=>__('Type frame id to use only that frame in json','themify'),
            'seg'=>__('Play Segment','themify'),
            'delm'=>__('Delay to next row','themify'),
            'segm'=>__('Enter frame from-to,will be played only that segment','themify'),
            'basket'=>__('Add product to basket','themify'),
            'exp'=>__('Export Animation Html','themify'),
            'copy'=>__('Copy and paste this html where you want use this animation. %html%','themify'),
            'clsel'=>__('Enter Css selector(eg. "#content" or ".wrapper") of the element which should be clicked to start the animation.If it`s empty will be used this element.','themify'),
            'clhov'=>__('Enter Css selector(eg. "#content" or ".wrapper") of the element which should be hovered to start the animation.If it`s empty will be used this element.','themify'),
            'renm'=>sprintf(__('If your animation doesn`t use "expanded masks","text as font","track matte","3d layers"... use canvas for performance. You can read more about it <a href="%s" target="_blank">here</a>','themify'),'https://github.com/airbnb/lottie-web/wiki/Features')
        ),
        't' => __( 'Tooltip', 'themify' ),
        'tt' => __( 'Tooltip Text', 'themify' ),
        'cc' => __( 'CSS Class & ID', 'themify' ),
        'pd' => __( 'Published Date', 'themify' ),
        'md' => __( 'Modified Date', 'themify' ),
        'multi' => __( 'Multiply', 'themify' ),
        'screen' => __( 'Screen', 'themify' ),
        'overlay' => __( 'Overlay', 'themify' ),
        'darken' => __( 'Darken', 'themify' ),
        'light' => __( 'Lighten', 'themify' ),
        'colord' => __( 'Color Dodge', 'themify' ),
        'colorb' => __( 'Color Burn', 'themify' ),
        'diff' => __( 'Difference', 'themify' ),
        'excl' => __( 'Exclusion', 'themify' ),
        'lum' => __( 'Luminosity', 'themify' )
    ),
    'options' => array(
        'frame' => Themify_Builder_Model::get_frame_layout(),
        'preset_animation' => Themify_Builder_model::get_preset_animation(),
        'animation' => Themify_Builder_model::get_animation(),
        'visibility' => Themify_Builder_model::get_visibility(),
        'color' => Themify_Builder_model::get_colors(),
        'slider_options'=>Themify_Builder_model::get_slider_options(),
        'sidebars' => $sidebars,
        'order' => array(
            'desc' => __('Descending', 'themify'),
            'asc' => __('Ascending', 'themify')
        ),
        'orderBy' => array(
            'date' => __('Date', 'themify'),
            'ID' => __('ID', 'themify'),
            'author' => __('Author', 'themify'),
            'title' => __('Title', 'themify'),
            'name' => __('Name', 'themify'),
            'modified' => __('Modified', 'themify'),
            'rand' => __('Random', 'themify'),
            'comment_count' => __('Comment Count', 'themify'),
            'meta_value' => __('Custom Field', 'themify'),
        )
    )
);
$image_size = themify_get_image_sizes_list(false);
if (!empty($image_size)) {
    $options['options']['image_size'] = array_merge(
        array( '' => '' ),
        $image_size
    );
}
$image_size=$sidebars=null;
for ( $i = 1; $i <= 6; ++$i ) {
    $options['label']['h'.$i.'_f'] =  sprintf( __( 'Heading %s Font', 'themify' ), $i );
}
return $options;